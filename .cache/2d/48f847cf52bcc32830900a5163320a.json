{"id":"../src/gql/query.js","dependencies":[{"name":"H:\\Programmierung\\Workspaces\\GraphQL\\notedly\\web\\package.json","includedInParent":true,"mtime":1642864778155},{"name":"@apollo/client","loc":{"line":1,"column":20},"parent":"H:\\Programmierung\\Workspaces\\GraphQL\\notedly\\web\\src\\gql\\query.js","resolved":"H:\\Programmierung\\Workspaces\\GraphQL\\notedly\\web\\node_modules\\@apollo\\client\\index.js"}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IS_LOGGED_IN = exports.GET_NOTES = exports.GET_NOTE = exports.GET_MY_NOTES = exports.GET_MY_FAVORITES = exports.GET_ME = void 0;\n\nvar _client = require(\"@apollo/client\");\n\nvar _templateObject, _templateObject2, _templateObject3, _templateObject4, _templateObject5, _templateObject6;\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n// our GraphQL query, stored as a variable\nvar GET_NOTES = (0, _client.gql)(_templateObject || (_templateObject = _taggedTemplateLiteral([\"\\n    query noteFeed($cursor: String) {\\n        noteFeed(cursor: $cursor) {\\n            cursor\\n            hasNextPage\\n            notes {\\n                id\\n                createdAt\\n                content\\n                favoriteCount\\n                author {\\n                    username\\n                    id\\n                    avatar\\n                }\\n            }\\n        }\\n    }\\n\"]))); // the note query, which accepts an ID variable\n\nexports.GET_NOTES = GET_NOTES;\nvar GET_NOTE = (0, _client.gql)(_templateObject2 || (_templateObject2 = _taggedTemplateLiteral([\"\\n    query note($id: ID!) {\\n        note(id: $id) {\\n            id\\n            createdAt \\n            content\\n            favoriteCount\\n            author {\\n                username\\n                id\\n                avatar\\n            }\\n        }\\n    }\\n\"])));\nexports.GET_NOTE = GET_NOTE;\nvar IS_LOGGED_IN = (0, _client.gql)(_templateObject3 || (_templateObject3 = _taggedTemplateLiteral([\"\\n    {\\n        isLoggedIn @client\\n    }\\n\"])));\nexports.IS_LOGGED_IN = IS_LOGGED_IN;\nvar GET_MY_NOTES = (0, _client.gql)(_templateObject4 || (_templateObject4 = _taggedTemplateLiteral([\"\\n    query me {\\n        me {\\n            id\\n            username\\n            notes {\\n                id\\n                createdAt\\n                content\\n                favoriteCount\\n                author {\\n                    username\\n                    id\\n                    avatar\\n                }\\n            }\\n        }\\n    }\\n\"])));\nexports.GET_MY_NOTES = GET_MY_NOTES;\nvar GET_MY_FAVORITES = (0, _client.gql)(_templateObject5 || (_templateObject5 = _taggedTemplateLiteral([\"\\n    query me {\\n        me {\\n            id\\n            username\\n            favorites {\\n                id\\n                createdAt\\n                content\\n                favoriteCount\\n                author {\\n                    username\\n                    id\\n                    avatar\\n                }\\n            }\\n        }\\n    }\\n\"])));\nexports.GET_MY_FAVORITES = GET_MY_FAVORITES;\nvar GET_ME = (0, _client.gql)(_templateObject6 || (_templateObject6 = _taggedTemplateLiteral([\"\\n    query me {\\n        me {\\n            id\\n            favorites {\\n                id\\n            }\\n        }\\n    }\\n\"])));\nexports.GET_ME = GET_ME;"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"../src/gql/query.js","original":{"line":1,"column":0}},{"generated":{"line":14,"column":0},"source":"../src/gql/query.js","original":{"line":3,"column":0}},{"generated":{"line":15,"column":0},"source":"../src/gql/query.js","original":{"line":4,"column":0}},{"name":"GET_NOTES","generated":{"line":15,"column":4},"source":"../src/gql/query.js","original":{"line":4,"column":6}},{"generated":{"line":15,"column":13},"source":"../src/gql/query.js","original":{"line":4,"column":15}},{"name":"gql","generated":{"line":15,"column":20},"source":"../src/gql/query.js","original":{"line":4,"column":18}},{"generated":{"line":15,"column":31},"source":"../src/gql/query.js","original":{"line":4,"column":15}},{"generated":{"line":15,"column":508},"source":"../src/gql/query.js","original":{"line":4,"column":0}},{"generated":{"line":15,"column":510},"source":"../src/gql/query.js","original":{"line":24,"column":0}},{"generated":{"line":18,"column":0},"source":"../src/gql/query.js","original":{"line":25,"column":0}},{"name":"GET_NOTE","generated":{"line":18,"column":4},"source":"../src/gql/query.js","original":{"line":25,"column":6}},{"generated":{"line":18,"column":12},"source":"../src/gql/query.js","original":{"line":25,"column":14}},{"name":"gql","generated":{"line":18,"column":19},"source":"../src/gql/query.js","original":{"line":25,"column":17}},{"generated":{"line":18,"column":30},"source":"../src/gql/query.js","original":{"line":25,"column":14}},{"generated":{"line":18,"column":370},"source":"../src/gql/query.js","original":{"line":25,"column":0}},{"generated":{"line":20,"column":0},"source":"../src/gql/query.js","original":{"line":41,"column":0}},{"name":"IS_LOGGED_IN","generated":{"line":20,"column":4},"source":"../src/gql/query.js","original":{"line":41,"column":6}},{"generated":{"line":20,"column":16},"source":"../src/gql/query.js","original":{"line":41,"column":18}},{"name":"gql","generated":{"line":20,"column":23},"source":"../src/gql/query.js","original":{"line":41,"column":21}},{"generated":{"line":20,"column":34},"source":"../src/gql/query.js","original":{"line":41,"column":18}},{"generated":{"line":20,"column":150},"source":"../src/gql/query.js","original":{"line":41,"column":0}},{"generated":{"line":22,"column":0},"source":"../src/gql/query.js","original":{"line":47,"column":0}},{"name":"GET_MY_NOTES","generated":{"line":22,"column":4},"source":"../src/gql/query.js","original":{"line":47,"column":6}},{"generated":{"line":22,"column":16},"source":"../src/gql/query.js","original":{"line":47,"column":18}},{"name":"gql","generated":{"line":22,"column":23},"source":"../src/gql/query.js","original":{"line":47,"column":21}},{"generated":{"line":22,"column":34},"source":"../src/gql/query.js","original":{"line":47,"column":18}},{"generated":{"line":22,"column":460},"source":"../src/gql/query.js","original":{"line":47,"column":0}},{"generated":{"line":24,"column":0},"source":"../src/gql/query.js","original":{"line":67,"column":0}},{"name":"GET_MY_FAVORITES","generated":{"line":24,"column":4},"source":"../src/gql/query.js","original":{"line":67,"column":6}},{"generated":{"line":24,"column":20},"source":"../src/gql/query.js","original":{"line":67,"column":22}},{"name":"gql","generated":{"line":24,"column":27},"source":"../src/gql/query.js","original":{"line":67,"column":25}},{"generated":{"line":24,"column":38},"source":"../src/gql/query.js","original":{"line":67,"column":22}},{"generated":{"line":24,"column":468},"source":"../src/gql/query.js","original":{"line":67,"column":0}},{"generated":{"line":26,"column":0},"source":"../src/gql/query.js","original":{"line":87,"column":0}},{"name":"GET_ME","generated":{"line":26,"column":4},"source":"../src/gql/query.js","original":{"line":87,"column":6}},{"generated":{"line":26,"column":10},"source":"../src/gql/query.js","original":{"line":87,"column":12}},{"name":"gql","generated":{"line":26,"column":17},"source":"../src/gql/query.js","original":{"line":87,"column":15}},{"generated":{"line":26,"column":28},"source":"../src/gql/query.js","original":{"line":87,"column":12}},{"generated":{"line":26,"column":226},"source":"../src/gql/query.js","original":{"line":87,"column":0}}],"sources":{"../src/gql/query.js":"import { gql } from '@apollo/client';\r\n\r\n// our GraphQL query, stored as a variable\r\nconst GET_NOTES = gql`\r\n    query noteFeed($cursor: String) {\r\n        noteFeed(cursor: $cursor) {\r\n            cursor\r\n            hasNextPage\r\n            notes {\r\n                id\r\n                createdAt\r\n                content\r\n                favoriteCount\r\n                author {\r\n                    username\r\n                    id\r\n                    avatar\r\n                }\r\n            }\r\n        }\r\n    }\r\n`\r\n\r\n// the note query, which accepts an ID variable\r\nconst GET_NOTE = gql`\r\n    query note($id: ID!) {\r\n        note(id: $id) {\r\n            id\r\n            createdAt \r\n            content\r\n            favoriteCount\r\n            author {\r\n                username\r\n                id\r\n                avatar\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst IS_LOGGED_IN = gql`\r\n    {\r\n        isLoggedIn @client\r\n    }\r\n`;\r\n\r\nconst GET_MY_NOTES = gql`\r\n    query me {\r\n        me {\r\n            id\r\n            username\r\n            notes {\r\n                id\r\n                createdAt\r\n                content\r\n                favoriteCount\r\n                author {\r\n                    username\r\n                    id\r\n                    avatar\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_MY_FAVORITES = gql`\r\n    query me {\r\n        me {\r\n            id\r\n            username\r\n            favorites {\r\n                id\r\n                createdAt\r\n                content\r\n                favoriteCount\r\n                author {\r\n                    username\r\n                    id\r\n                    avatar\r\n                }\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst GET_ME = gql`\r\n    query me {\r\n        me {\r\n            id\r\n            favorites {\r\n                id\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nexport {\r\n    GET_NOTES,\r\n    GET_NOTE,\r\n    IS_LOGGED_IN,\r\n    GET_MY_NOTES,\r\n    GET_MY_FAVORITES,\r\n    GET_ME\r\n};"},"lineCount":null}},"error":null,"hash":"18dbf113df89829430422e83dbbdb0b3","cacheData":{"env":{}}}